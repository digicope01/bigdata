[클래스 기초 실습 문제] 
- 클래스 작성과 인스턴스 멤버/ 메서드 구현 및 호출 연습

1. Car class를 만들고 다음 멤버와 메서드를 구현하고 
   호출하는 코드를 구현해보세요
   클래스의 인스턴스 객체  sonata 를 만든다
   클래스의 모든 메서드를 호출해서 동작을 확인해본다

 <인스턴스 멤버>
 car_name : 자동차의 차종, 초기값은 '소나타'
 car_drv : 자동차의 구동 방식, 초기값은 '전륜'
            ('전륜', '후륜', '4륜'의 3가지)
 car_speed : 자동차의 속도, 초기 값은 0으로 설정
 car_direction : 자동차의 방향, 초기 값은 '앞쪽'으로 설정
                   ('왼쪽','오른쪽','앞쪽','뒤쪽','정지')
 car_fuel : 자동차의 연료, 초기 값은 '휘발유'
                   ('휘발유','경유','LPG','수소','전기','하이브리드')
 car_state : 자동차의 상태, 초기 값은 '정상' 
               ('정상', '브레이크고장', '전조등고장', '후미등고장', '연료부족',
                '타이어펑크', '엔진오일부족', '냉각수부족', '폐차요망')

 <메서드>
 __init__( )   : 생성자 함수 , 인스턴스 객체를 생성할 때 호출됨, 
                 '생성자 호출'  메시지가 출력 되도록한다
                 인스턴스 멤버 변수들의 초기화 값을 설정해준다

 set_car_name('산타페') : "차종이 [ 산타페 ]로 변경 되었습니다" , 
                               car_name 값을 변경
 get_car_name() : 설정된 차종(car_name) 을 반환

 set_car_drv('4륜') : "차의 구동 방식이 [ 4륜 ]으로 변경 되었습니다" 
                          car_drv 값을 변경
 get_car_drv() : 설정된 구동방식(car_drv) 을 반환

 set_car_fuel('전기') : "차의 연료 방식이 [ 전기 ]로 변경 되었습니다" 
                          car_fuel 값을 변경
 get_car_fuel() : 설정된 연료 방식(car_fuel) 을 반환

 set_car_state('브레이크고장') : "차의 상태가 [ 브레이크고장 ]으로 변경 되었습니다" 
                          car_state 값을 변경
 get_car_state() : 설정된 차의 상태(car_state) 를 반환

 set_speed(100)  : " 자동차의 속력이 시속 [ 100 ] km 로 변경되었습니다", 
                      car_speed 값을 변경
 get_speed()  : 설정된 자동차의 속도(car_speed )를 반환

 turn('오른쪽')   : " 자동차의 방향이  [ 오른쪽 ]으로 변경되었습니다"
	          car_direction의  값을 변경

 stop() :   "자동차가 정지 하였습니다"  
         car_direction의  값을 변경
	car_direction의  값을 [ 정지 ]로 변경
 
 start() :  "자동차가 시동이 걸렸습니다"

 move_forward(): "자동차가 [ 전진 ]합니다 속도는 [ 100 ]km입니다"
           속도값은 car_speed를 사용, car_direction의  값을  '앞쪽'으로 변경 
 move_backward() :"자동차가 [ 후진 ]합니다 속도는 [ 100 ] km 입니다"
           속도값은 car_speed를 사용, car_direction의  값을  '뒤쪽'으로 변경 

 __del__( )   : "[ 산타페 ] 자동차가 제거되었습니다"
                   소멸자 함수이며  car_name을 출력하고 
                   인스턴스 객체가 삭제될 때 자동으로 호출된다   


2. CarCenter  클래스를 만들고 다음 멤버변수와 메서드를 구현하고 
   호출하는 코드를 구현해보세요.  클래스의 인스턴스 객체  ct1 을 만든다
   각 메서드를 호출하여 결과를 확인한다 
   (1번 과제 완료 후에 2번 과제를 진행한다)

 <클래스 멤버>
  price : {'정상':10, '브레이크고장':1000, '전조등고장':2000, '후미등고장':3000, '연료부족':4000,
           '타이어펑크':5000, '엔진오일부족':6000, '냉각수부족':7000, '폐차처리':9000} 
           사전 사용

 <인스턴스 멤버>
 fix_cost : 수리비용, 초기 값은 0
 
 fixed_list : 수리내역을 사전에 저장한다, 초기값은 빈 사전
              { '산타페':'브레이크고장', '소나타':'전조등고장', ....}

 <메서드>
 __init__( )   : 생성자 함수 , 인스턴스 객체를 생성할 때 호출됨,
                 인스턴스 멤버 변수들의 초기화 값을 설정해준다

 fix_car(sonata) : Car 클래스의 인스턴스 객체를 인자로 받고 입력된 객체의
                   car_state값을 분석하여 수리를 진행한다, fix_cost값을 변경한다
	           fixed_list 에 추가한다
                   출력 "[ 산타페 ]의 [ 브레이크고장 ] 수리 완료, 비용은 [ 1000 ]원 입니다"

 set_car_drv(sonata,'후륜') : "차의 구동 방식이 [ 후륜 ]으로 변경 되었습니다" 
                              car_drv 값을 변경
 get_car_drv(sonata) : 설정된 구동방식(car_drv) 을 반환

 set_car_fuel(sonata,'전기') : "차의 연료 방식이 [ 전기 ]로 변경 되었습니다" 
                               car_fuel 값을 변경
 get_car_fuel(sonata) : 설정된 연료 방식(car_fuel) 을 반환

 get_fixed_list(sonata) :  수리내역과 비용을 알려준다, 
                           문자열로 완성해서 반환해준다--> '[브레이크고장] : [1000]원'

